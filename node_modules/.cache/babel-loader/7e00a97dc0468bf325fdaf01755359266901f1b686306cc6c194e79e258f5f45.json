{"ast":null,"code":"var _jsxFileName = \"/home/adminserver/vocational-test-app/src/components/TestFlow/TestFlow.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport Question from \"./Question\";\nimport ProgressBar from \"./ProgressBar\";\nimport ModalStart from \"../ModalStart/ModalStart\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getQuestions } from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TestFlow() {\n  _s();\n  const navigate = useNavigate();\n  const questions = getQuestions();\n  const [current, setCurrent] = useState(0);\n  const [score, setScore] = useState(0);\n  const [started, setStarted] = useState(false);\n  const handleAnswer = isCorrect => {\n    if (isCorrect) setScore(score + 1);\n    if (current + 1 < questions.length) {\n      setCurrent(current + 1);\n    } else {\n      navigate(\"/results\", {\n        state: {\n          score,\n          total: questions.length\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: !started ? /*#__PURE__*/_jsxDEV(ModalStart, {\n      open: true,\n      onStart: () => setStarted(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: \"center\",\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        value: (current + 1) / questions.length * 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        data: questions[current],\n        onAnswer: handleAnswer,\n        questionNumber: current + 1,\n        total: questions.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(TestFlow, \"pHyzzh5vPrs/tBXht6w88EiuFak=\", false, function () {\n  return [useNavigate];\n});\n_c = TestFlow;\nvar _c;\n$RefreshReg$(_c, \"TestFlow\");","map":{"version":3,"names":["useState","Box","Button","Typography","Question","ProgressBar","ModalStart","useNavigate","getQuestions","jsxDEV","_jsxDEV","TestFlow","_s","navigate","questions","current","setCurrent","score","setScore","started","setStarted","handleAnswer","isCorrect","length","state","total","children","open","onStart","fileName","_jsxFileName","lineNumber","columnNumber","sx","textAlign","mt","value","data","onAnswer","questionNumber","_c","$RefreshReg$"],"sources":["/home/adminserver/vocational-test-app/src/components/TestFlow/TestFlow.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport Question from \"./Question\";\nimport ProgressBar from \"./ProgressBar\";\nimport ModalStart from \"../ModalStart/ModalStart\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getQuestions } from \"../../services/api\";\n\nexport default function TestFlow() {\n  const navigate = useNavigate();\n  const questions = getQuestions();\n  const [current, setCurrent] = useState(0);\n  const [score, setScore] = useState(0);\n  const [started, setStarted] = useState(false);\n\n  const handleAnswer = (isCorrect) => {\n    if (isCorrect) setScore(score + 1);\n\n    if (current + 1 < questions.length) {\n      setCurrent(current + 1);\n    } else {\n      navigate(\"/results\", { state: { score, total: questions.length } });\n    }\n  };\n\n  return (\n    <Box>\n      {!started ? (\n        <ModalStart open={true} onStart={() => setStarted(true)} />\n      ) : (\n        <Box sx={{ textAlign: \"center\", mt: 4 }}>\n          <ProgressBar value={((current + 1) / questions.length) * 100} />\n          <Question\n            data={questions[current]}\n            onAnswer={handleAnswer}\n            questionNumber={current + 1}\n            total={questions.length}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AACvD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,SAAS,GAAGN,YAAY,CAAC,CAAC;EAChC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMqB,YAAY,GAAIC,SAAS,IAAK;IAClC,IAAIA,SAAS,EAAEJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IAElC,IAAIF,OAAO,GAAG,CAAC,GAAGD,SAAS,CAACS,MAAM,EAAE;MAClCP,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;IACzB,CAAC,MAAM;MACLF,QAAQ,CAAC,UAAU,EAAE;QAAEW,KAAK,EAAE;UAAEP,KAAK;UAAEQ,KAAK,EAAEX,SAAS,CAACS;QAAO;MAAE,CAAC,CAAC;IACrE;EACF,CAAC;EAED,oBACEb,OAAA,CAACT,GAAG;IAAAyB,QAAA,EACD,CAACP,OAAO,gBACPT,OAAA,CAACJ,UAAU;MAACqB,IAAI,EAAE,IAAK;MAACC,OAAO,EAAEA,CAAA,KAAMR,UAAU,CAAC,IAAI;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE3DtB,OAAA,CAACT,GAAG;MAACgC,EAAE,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAT,QAAA,gBACtChB,OAAA,CAACL,WAAW;QAAC+B,KAAK,EAAG,CAACrB,OAAO,GAAG,CAAC,IAAID,SAAS,CAACS,MAAM,GAAI;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChEtB,OAAA,CAACN,QAAQ;QACPiC,IAAI,EAAEvB,SAAS,CAACC,OAAO,CAAE;QACzBuB,QAAQ,EAAEjB,YAAa;QACvBkB,cAAc,EAAExB,OAAO,GAAG,CAAE;QAC5BU,KAAK,EAAEX,SAAS,CAACS;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpB,EAAA,CAlCuBD,QAAQ;EAAA,QACbJ,WAAW;AAAA;AAAAiC,EAAA,GADN7B,QAAQ;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}